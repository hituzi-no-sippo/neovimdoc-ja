*lua-guide.txt*                        Nvim

                            NVIM REFERENCE MANUAL

                          Guide to using Lua in Nvim


                                       Type |gO| to see the table of contents.

==============================================================================
イントロダクション                                                   *lua-guide*

このガイドは Neovim で Lua を使用するための基本を説明します。辞書のように全ての
機能を細かく載せるものではありません。NeovimでLua を快適に使い始めるための最低限
の知識、サバイバルキットのような物だと思ってください。

このガイドは Lua 言語自体のガイドではないことに注意してください。 Neovim で使い
やすいように提供されている機能についてのガイドです。Lua について更に学びたい場合
は、|luaref| や、|lua-concepts| をご覧ください。同様に、|user-manual| に載ってい
るNeovim の基本的な機能(コマンド、オプション、マッピング、自動コマンド)にある程
度慣れていることを前提としています。

------------------------------------------------------------------------------
APIについて                                                      *lua-guide-api*

このガイドの目的は、Lua ("API") で Neovim を操作するいくつかの方法を紹介すること
です。この API は3つの異るレイヤーから成っています:

1. Vim から継承された "Vim API": Vim script の |ex-commands| 、
|builtin-functions|、|uset-function|。これらの3つはそれぞれ、 |vim.cmd()|、
|vim.fn| でアクセスできます。下記の |lua-guide-vimscript| で紹介します。

2. リモートプラグインと GUI で使われる C で書かれた "Neovim API"。|api| を参照し
てください。これらの関数は |vim.api| でアクセスできます。

3. Lua 専用に書かれた "Lua API"。これらは `vim.*` でアクセスできます。
|lua-stdlib| を参照してください。

ここで重要な違いは、API 関数は元のレイヤーから動作を継承することです。例えば、
Neovim API 関数は Lua で引数を省略(`nil` として渡される)できたとしても全てを指定
する必要があります。加えて、Vim API 関数はインデックスが0始まりなのに対して、
Lua では1始まりです。

これによって、新しい API を作ることなく Lua に対応することができました。そのため、
機能やパフォーマンスに大きな利点がない限り関数はレイヤー間で重複しません。(例え
ば、|:autocmd| を使用せず、Lua 関数で |nvim_create_autocmd()| を使用できます。)
同じ方法が複数ある場合、このガイドでは Lua から最も使いやすい方法を紹介します。

==============================================================================
Luaを使う                                                  *lua-guide-using-Lua*

コマンドラインから Lua コードを実行するには、|:lua| コマンドを使用します。:
>vim
    :lua print("Hello!")
<
Note: 各 |:lua|
コマンドはそれぞれスコープを持っており、ローカル宣言された変数はその他のコマンド
からアクセスできません。次の例は動作しません。:
>vim
    :lua local foo = 1
    :lua print(foo)
    " prints "nil" instead of "1"
<
また、|:lua| を使用することができ、`:lua vim.pretty_print(...)` と同じ動作をしま
す。
これによって、変数やテーブルの値を楽に確認できます。:
>lua
    :lua=package
<
外部の Lua ファイルを実行したい場合、|:source| コマンドを使用します。
これは、Vim script ファイルと同じ様に動作します。:
>vim
    :source ~/programs/baz/myluafile.lua
<
最後に、ヒアドキュメント構文を使用すると、Vim script ファイルに Lua コードを含め
ることができます。:
>vim
    lua << EOF
      local tbl = {1, 2, 3}
      for k, v in ipairs(tbl) do
        print(v)
      end
    EOF
<
------------------------------------------------------------------------------
起動時に Lua ファイルを使用する                               *lua-guide-config*

Neovim は、`init.vim` か `init.lua` を設定ファイルとして使用することができます。
ただし、同時に使用することはできません。これらは、|config| ディレクトリへ配置す
る必要があり一般的に Linux, BSD, macOS では `~/.config/nvim` で Windows では
`~/AppData/Local/nvim/` です。Note `init.vim` 内で Lua を、`init.vim` 内でVim
sript を使うこともできます。以下で説明します。

その他の Lua スクリプトを |startup| 時に自動で実行させたい場合、`runtimepath` 内
にある `plugin/` ディレクトリに配置してください。

------------------------------------------------------------------------------
Lua modules                                                  *lua-guide-modules*

任意のタイミングで Lua ファイルを読み込みたい場合、|'runtimepath'| 内にある
`lua` ディレクトリに配置して `require` でロードします。(これは、Vim script にお
ける |autoload| と同じ役割です。)

このようなディレクトリ構造があるとします。:
>
    ~/.config/nvim
    |-- after/
    |-- ftplugin/
    |-- lua/
    |  |-- myluamodule.lua
    |  |-- other_modules/
    |     |-- anothermodule.lua
    |     |-- init.lua
    |-- plugin/
    |-- syntax/
    |-- init.vim
<

次の Lua コードで `myluamodule.lua` をロードします。:
>lua
    require("myluamodule")
<
Note: `.lua` 拡張子がつかないことに注意してください。

同様に、`other_modules/anothermodule.lua` をロードするには次のようにします。
>lua
    require('other_modules/anothermodule')
    -- or
    require('other_modules.anothermodule')
<

Note: サブモジュールは単なるサブディレクトリであることに注意してください。`.` は
パスの区切り文字 `/` と同じです。(Windows でも同様)

フォルダ内にある |init.lua| ファイルはファイル名を指定しなくてもロードできます。:
>lua
    require('other_modules') -- loads other_modules/init.lua
<
読み込もうとしたモジュールが存在しない場合と構文エラーを含んでいる場合、実行中の
スクリプトは停止します。このようなエラーをキャッチするには `pcall()` を使用しま
す。次の例では、`module_with_error` のロードを試みてから関数を呼びます。失敗した
場合、エラーメッセージを表示します。:
>lua
    local ok, mymod = pcall(require, 'module_with_error')
    if not ok then
      print("Module had an error")
    else
      mymod.function()
    end
<
|:source| とは対照的に、|require()| は |runtimepath| 内の `lua/` ディレクトリを
検索するだけでなく、初回使用時にモジュールをキャッシュします。再度 `require()`
を呼び出す場合、スクリプトは実行されずキャッシュされたファイルを返します。もう一
度実行したい場合、手動でキャッシュを削除します。:
>lua
    package.loaded['myluamodule'] = nil
    require('myluamodule')    -- read and execute the module again from disk
<
------------------------------------------------------------------------------
参照:
• |lua-require|
• |luaref-pcall()|

==============================================================================
Vim のコマンドと関数を Lua から使う                        *lua-guide-vimscript*

全ての Vim のコマンドと関数は Lua から使用することができます。

------------------------------------------------------------------------------
Vim コマンド                                            *lua-guide-vim-commands*

Vim コマンドを Lua から実行するには、文字列を |vim.cmd()| に渡します。:
>lua
    vim.cmd("colorscheme habamax")
<
Note 特殊な文字はバックシュラッシュでエスケープが必要です:
>lua
    vim.cmd("%s/\\Vfoo/bar/g")
<
別の方法として角カッコを使った文字列リテラル(|luaref-literal| を参照)があります。
>lua
    vim.cmd([[%s/\Vfoo/bar/g]])
<
加えて、文字列リテラルは複数行の文字列を扱える利点があります。
1回の |vim.cmd()| の呼び出しで複数のコマンドを渡すこともできます。:
>lua
    vim.cmd([[
      highlight Error guibg=red
      highlight link Warning Error
    ]])
<
これと逆の機能として |lua-heredoc| があり、 `init.vim` に Lua コードを含めること
ができます。

プログラム的に Vim コマンドを呼び出したい場合、次のような方法があります(上記の例
と等価です):
>lua
    vim.cmd.colorscheme("habamax")
    vim.cmd.highlight({ "Error", "guibg=red" })
    vim.cmd.highlight({ "link", "Warning", "Error" })
<
------------------------------------------------------------------------------
Vim script 関数                                        *lua-guide-vim-functions*

|vim.fn| を使用して Vim script の関数を Lua から呼び出します。データの型は Lua
と Vim script の間で自動的に変換されます。:
>lua
    print(vim.fn.printf('Hello from %s', 'Lua'))

    local reversed_list = vim.fn.reverse({ 'a', 'b', 'c' })
    print(vim.inspect(reversed_list)) -- { "c", "b", "a" }

    local function print_stdout(chan_id, data, name)
      print(data[1])
    end

    vim.fn.jobstart('ls', { on_stdout = print_stdout })
    print(vim.fn.printf('Hello from %s', 'Lua'))
<
これは |builtin-function| と |user-function| の両方で動作します。

Note ハッシュ(`#`)は Lua で有効な識別子ではないため、 |autoload| 関数などを呼び
出すには次の構文を使用します。:
>lua
    vim.fn['my#autoload#function']()
<
------------------------------------------------------------------------------
参照:
• |builtin-functions|: Vim script 関数のアルファベット順のリスト
• |function-list|:     トピックごとにグループ化された Vim script 関数のリスト
• |:runtime|:          run all Lua scripts matching a pattern in |'runtimepath'|
• |:runtime|:          |'runtimepath'| 内のパターンに一致する全ての Lua スクリ
                      プト が実行されます
• |package.path|:      `require()` で検索される全てのパスのリスト

==============================================================================
変数                                                       *lua-guide-variables*

|variable-scope| に準じて変数を読み書きできるラッパーがあります。:

• |vim.g|:   グローバル変数(|g:|)
• |vim.b|:   バッファローカルな変数 (|b:|)
• |vim.w|:   ウィンドウローカルな変数 (|w:|)
• |vim.t|:   variables for the current tabpage (|t:|)
• |vim.t|:   タブページにローカルな変数 (|t:|)
• |vim.v|:   Vim が定義している変数 (|v:|)
• |vim.env|: エディタのセッションで定義されている環境変数

データの型は次の例のように自動的に変換されます。:
>lua
    vim.g.some_global_variable = {
      key1 = "value",
      key2 = 300
    }

    print(vim.inspect(vim.g.some_global_variable))
    --> { key1 = "value", key2 = 300 }
<
バッファ(番号)やウィンドウ(|window_ID|)やタブページを指定したい場合、次のように
ラッパーのインデックスを指定します。:
>lua
    vim.b[2].myvar = 1               -- set myvar for buffer number 2
    vim.w[1005].myothervar = true    -- set myothervar for window ID 1005
<
変数名に Lua で有効ではない文字が含まれている場合、次の構文を使用します。：
>lua
    vim.g['my#variable'] = 1
<
Note 配列のフィールドを直接変更することはできません。次の例は動作しません。:
>lua
    vim.g.some_global_variable.key2 = 400
    vim.pretty_print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 300 }
<
代わりに、Lua の中間テーブルを作成してから上書きします。:
>lua
    local temp_table = vim.g.some_global_variable
    temp_table = keys = 400
    vim.g.some_global_variable = temp_table
    vim.pretty_print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 400 }
<
変数を削除するには、単に `nil` を代入します。:
>lua
    vim.g.myvar = nil
<
------------------------------------------------------------------------------
参考:
• |lua-vim-variables|

==============================================================================
オプション                                                   *lua-guide-options*

Lua で オプション(|options|)を設定する方法は2種類あります。

------------------------------------------------------------------------------
vim.opt

`init.lua` で グローバルオプションとローカルオプションを設定する最も便利な方法と
して `vim.opt` とその仲間達があります。

• |vim.opt|:        |:set| のように動作します。
• |vim.opt_global|: |:setglobal| のように動作します。
• |vim.opt_local|:  |:setlocal| のように動作します。

例えば、次の Vim script コマンドは
>vim
    set smarttab
    set nosmarttab
<
下記と等価です。
>lua
    vim.opt.smarttab = true
    vim.opt.smarttab = false
<
list/map/set のようなオプションは
>vim
    set wildignore=*.o,*.a,__pycache__
    set listchars=space:_,tab:>~
    set formatoptions=njt
<
次のように Lua のテーブルで楽に設定できます。
>lua
    vim.opt.wildignore = { '*.o', '*.a', '__pycache__' }
    vim.opt.listchars = { space = '_', tab = '>~' }
    vim.opt.formatoptions = { n = true, j = true, t = true }
<
これらのラッパーには Vim script における |:set+=|, |:set^=|, |:set-=| と同じ動作
をするメソッドがあります。:
>lua
    vim.opt.shortmess:append({ I = true })
    vim.opt.wildignore:prepend('*.o')
    vim.opt.whichwrap:remove({ 'b', 's' })
<
ただし、オプションの値に直接アクセスすることができず、|vim.opt:get()| を経由して
アクセスします。
>lua
    print(vim.opt.smarttab)
    --> {...} (big table)
    print(vim.opt.smarttab:get())
    --> false
    vim.pretty_print(vim.opt.listchars:get())
    --> { space = '_', tab = '>~' }
<
------------------------------------------------------------------------------
vim.o

上記に対して、変数のように直接扱うことのできる `vim.o` とその仲間達があります。
`:echo &number` や `:let &listchars='space:_,tab:>~'` のようにオプションを取得、
設定できます。

• |vim.o|:  |:set| のように動作します。
• |vim.go|: |:setglobal| のように動作します。
• |vim.bo|: バッファローカルなオプション
• |vim.wo|: ウィンドウローカルなオプション

例:
>lua
    vim.o.smarttab = false -- :set nosmarttab
    print(vim.o.smarttab)
    --> false
    vim.o.listchars = 'space:_,tab:>~' -- :set listchars='space:_,tab:>~'
    print(vim.o.listchars)
    --> 'space:_,tab:>~'
    vim.o.isfname = vim.o.isfname .. ',@-@' -- :set isfname+=@-@
    print(vim.o.isfname)
    --> '@,48-57,/,.,-,_,+,,,#,$,%,~,=,@-@'
    vim.bo.shiftwidth = 4 -- :setlocal shiftwidth=4
    print(vim.bo.shiftwidth)
    --> 4
<
変数と同じようにバッファ番号や |window_ID| を指定することができます。何も指定し
ない場合、カレントバッファ/カレントウィンドウが対象になります。:
>lua
    vim.bo[4].expandtab = true -- sets expandtab to true in buffer 4
    vim.wo.number = true       -- sets number to true in current window
    print(vim.wo[0].number)    --> true
<
------------------------------------------------------------------------------
参照:
• |lua-options|

==============================================================================
マッピング                                                  *lua-guide-mappings*

Vim コマンドや Lua 関数をキー入力にマッピングすることができます。

------------------------------------------------------------------------------
マッピングを作成する                                    *lua-guide-mappings-set*

マッピングを作成するには |vim.keymap.set()| を使用します。この関数は3つの引数を
必要とします。:
• {mode} はマッピングを適用するモードのプレフィックスの文字列または、テーブルで
   す。プレフィックスのリストは |:map-modes| にあります。"!"を指定すると |:map!| 
   となり、何も指定しない場合は |:map| です。
• {lhs} はトリガーとなるキーの文字列です。空の文字列は |<Nop>| と解釈され、 キ
   ーを無効にします。
• {rhs} は Vim コマンドの文字列か、Lua の関数です。{lhs} を入力すると実行されま
   す。

例:
>lua
    -- Normal mode mapping for Vim command
    vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>')
    -- Normal and Command-line mode mapping for Vim command
    vim.keymap.set({'n', 'c'}, '<Leader>ex2', '<cmd>echo "Example 2"<cr>')
    -- Normal mode mapping for Lua function
    vim.keymap.set('n', '<Leader>ex3', vim.treesitter.start)
    -- Normal mode mapping for Lua function with arguments
    vim.keymap.set('n', '<Leader>ex4', function() print('Example 4') end)
<
Lua のモジュールから関数をマッピングすることもできます。
>lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action)
<
Note この場合、マッピングが定義された時にプラグインが読み込まれます。マッピング
が実行された時に読み込んで欲しい場合(|autoload| 関数のように)、`function() end`
でラップします。:
>lua
    vim.keymap.set('n', '<Leader>pl2', function() require('plugin').action() end)
<
4つめの引数はオプションでテーブルを渡します。|:map-arguments| にあるマッピングの
振舞いを指定します。下記のオプションはとても役に立ちます。:
• `buffer`: バッファ番号を指定するとそのバッファだけにマッピングを適用できます。
   `0` か `true` を指定するとカレントバッファになります。 >lua
    -- set mapping for the current buffer
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { buffer = true })
    -- set mapping for the buffer number 4
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { buffer = 4 })
<
• `silent`: `true` を指定するとエラーメッセージを抑制できます。 >lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { silent = true })
<
• `expr`: `true` を指定すると {rhs} は実行されず返り値を入力として扱います。特
   殊な |keycodes| は自動的に変換されます。例えば、次の例は popupmenu の中だけ
   <down> を <c-n> に置き換えます。: >lua
    vim.keymap.set('c', '<down>', function()
      if vim.fn.pumvisible() == 1 then return '<c-n>' end
      return '<down>'
    end, { expr = true })
<
• `desc`: |:map| などでマッピングを表示したときに一緒に表示される文字列です。
   Lua 関数を {rhs} にした場合、`Lua: <number> <source file>:<line>` としか表示
   されないため、指定すると役立ちます。そのため、プラグインでマッピングを作成す
   る場合常に指定する必要があります。 >lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { desc = 'Execute action from plugin' })
<
• `remap`: デフォルトでは全てのマッピングは再帰的に実行されません(すなわち、
   |vim.keymap.set()|は |:noremap| と同じ動作です)。{rhs} 自体にマッピングを適用
   したい場合、`remap = true` を指定します。: >lua
    vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>')
    -- add a shorter mapping
    vim.keymap.set('n', 'e', '<Leader>ex1', { remap = true })
<
  Note: |<Plug>| マッピングはデフォルトである `remap = false` でも常に展開されま
  す。: >lua
    vim.keymap.set('n', '[%', '<Plug>(MatchitNormalMultiBackward)')
<
------------------------------------------------------------------------------
マッピングを削除する                                    *lua-guide-mappings-del*

特定のマッピングを削除するには |vim.keymap.del()| を使用します。:
>lua
    vim.keymap.del('n', '<Leader>ex1')
    vim.keymap.del({'n', 'c'}, '<Leader>ex2', {buffer = true})
<
------------------------------------------------------------------------------
参照:
• `vim.api.`|nvim_get_keymap()|:     全てのグローバルマッピングを返します
• `vim.api.`|nvim_buf_get_keymap()|: バッファローカルなマッピングを全て返します

==============================================================================
自動コマンド                                            *lua-guide-autocommands*

An |autocommand| is a Vim command or a Lua function that is automatically
executed whenever one or more |events| are triggered, e.g., when a file is
read or written, or when a window is created. These are accessible from Lua
through the Neovim API.
|autocommand| は|events| をトリガーにして Vim コマンドや Lua 関数を自動的に実行
します。

------------------------------------------------------------------------------
Creating autocommands                             *lua-guide-autocommand-create*

Autocommands are created using `vim.api.`|nvim_create_autocmd()|, which takes
two mandatory arguments:
• {event}: a string or table of strings containing the event(s) which should
           trigger the command or function.
• {opts}:  a table with keys that control what should happen when the event(s)
           are triggered.

The most important options are:

• `pattern`:  A string or table of strings containing the |autocmd-pattern|.
            Note: Environment variable like `$HOME` and `~` are not automatically
            expanded; you need to explicitly use `vim.fn.`|expand()| for this.
• `command`:  A string containing a Vim command.
• `callback`: A Lua function.

You must specify one and only one of `command` and `callback`. If `pattern` is
omitted, it defaults to `pattern = '*'`.
Examples:
>lua
    vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
      pattern = {"*.c", "*.h"},
      command = "echo 'Entering a C or C++ file'",
    })

    -- Same autocommand written with a Lua function instead
    vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
      pattern = {"*.c", "*.h"},
      callback = function() print("Entering a C or C++ file") end,
    })

    -- User event triggered by MyPlugin
    vim.api.nvim_create_autocmd("User", {
      pattern = "MyPlugin",
      callback = function() print("My Plugin Works!") end,
    })
<

Neovim will always call a Lua function with a single table containing information
about the triggered autocommand. The most useful keys are
• `match`: a string that matched the `pattern` (see |<amatch>|)
• `buf`:   the number of the buffer the event was triggered in (see |<abuf>|)
• `file`:  the file name of the buffer the event was triggered in (see |<afile>|)
• `data`:  a table with other relevant data that is passed for some events

For example, this allows you to set buffer-local mappings for some filetypes:
>lua
    vim.api.nvim.create_autocmd("FileType", {
      pattern = "lua",
      callback = function(args)
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, { buffer = args.buf })
      end
    })
<
This means that if your callback itself takes an (even optional) argument, you
must wrap it in `function() end` to avoid an error:
>lua
    vim.api.nvim_create_autocmd('TextYankPost', {
      callback = function() vim.highlight.on_yank() end
    })
<
(Since unused arguments can be omitted in Lua function definitions, this is
equivalent to `function(args) ... end`.)

Instead of using a pattern, you can create a buffer-local autocommand (see
|autocmd-buflocal|) with `buffer`; in this case, `pattern` cannot be used:
>lua
    -- set autocommand for current buffer
    vim.api.nvim_create_autocmd("CursorHold", {
      buffer = 0,
      callback = function() print("hold") end,
    })

    -- set autocommand for buffer number 33
    vim.api.nvim_create_autocmd("CursorHold", {
      buffer = 33,
      callback = function() print("hold") end,
    })
<
Similarly to mappings, you can (and should) add a description using `desc`:
>lua
    vim.api.nvim_create_autocmd('TextYankPost', {
      callback = function() vim.highlight.on_yank() end,
      desc = "Briefly highlight yanked text"
    })
<
Finally, you can group autocommands using the `group` key; this will be
covered in detail in the next section.

------------------------------------------------------------------------------
Grouping autocommands                             *lua-guide-autocommands-group*

Autocommand groups can be used to group related autocommands together; see
|autocmd-groups|. This is useful for organizing autocommands and especially
for preventing autocommands to be set multiple times.

Groups can be created with `vim.api.`|nvim_create_augroup()|. This function
takes two mandatory arguments: a string with the name of a group and a table
determining whether the group should be cleared (i.e., all grouped
autocommands removed) if it already exists. The function returns a number that
is the internal identifier of the group. Groups can be specified either by
this identifier or by the name (but only if the group has been created first).

For example, a common Vimscript pattern for autocommands defined in files that
may be reloaded is
>vim
    augroup vimrc
      " Remove all vimrc autocommands
      autocmd!
      au BufNewFile,BufRead *.html set shiftwidth=4
      au BufNewFile,BufRead *.html set expandtab
    augroup END
<
This is equivalent to the following Lua code:
>lua
    local mygroup = vim.api.nvim_create_augroup('vimrc', { clear = true })
    vim.api.nvim_create_autocmd( {'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = mygroup,
      cmd = 'set shiftwidth=4',
    })
    vim.api.nvim_create_autocmd( {'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = 'vimrc',  -- equivalent to group=mygroup
      cmd = 'set expandtab',
    })
<
Autocommand groups are unique for a given name, so you can reuse them, e.g.,
in a different file:
>lua
    local mygroup = vim.api.nvim_create_augroup('vimrc', { clear = false })
    vim.api.nvim_create_autocmd( {'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = mygroup,
      cmd = 'set shiftwidth=4',
    })
<
------------------------------------------------------------------------------
Deleting autocommands                            *lua-guide-autocommands-delete*

You can use `vim.api.`|nvim_clear_autocmds()| to remove autocommands. This
function takes a single mandatory argument that is a table of keys describing
the autocommands that are to be removed:
>lua
    -- Delete all BufEnter and InsertLeave autocommands
    vim.api.nvim_clear_autocmds({event = {"BufEnter", "InsertLeave"}})

    -- Delete all autocommands that uses "*.py" pattern
    vim.api.nvim_clear_autocmds({pattern = "*.py"})

    -- Delete all autocommands in group "scala"
    vim.api.nvim_clear_autocmds({group = "scala"})

    -- Delete all ColorScheme autocommands in current buffer
    vim.api.nvim_clear_autocmds({event = "ColorScheme", buffer = 0 })
<
Note: Autocommands in groups will only be removed if the `group` key is
specified, even if another option matches it.

------------------------------------------------------------------------------
See also
• |nvim_get_autocmds()|:  return all matching autocommands
• |nvim_exec_autocmds()|: execute all matching autocommands

==============================================================================
User commands                                           *lua-guide-usercommands*

|user-commands| are custom Vim commands that call a Vimscript or Lua function.
Just like built-in commands, they can have arguments, act on ranges, or have
custom completion of arguments. As these are most useful for plugins, we will
cover only the basics of this advanced topic.

------------------------------------------------------------------------------
Creating user commands                           *lua-guide-usercommands-create*

User commands can be created through the Neovim API with
`vim.api.`|nvim_create_user_command()|. This function takes three mandatory
arguments:
• a string that is the name of the command (which must start with an uppercase
  letter to distinguish it from builtin commands);
• a string containing Vim commands or a Lua function that is executed when the
  command is invoked;
• a table with |command-attributes|; in addition, it can contain the keys
  `desc` (a string describing the command); `force` (set to `false` to avoid
  replacing an already existing command with the same name), and `preview` (a
  Lua function that is used for |:command-preview|).

Example:
>lua
    vim.api.nvim_create_user_command('Test', 'echo "It works!"', {})
    vim.cmd.Test()
    --> It works!
<
(Note that the third argument is mandatory even if no attributes are given.)

Lua functions are called with a single table argument containing arguments and
modifiers. The most important are:
• `name`: a string with the command name
• `fargs`: a table containing the command arguments split by whitespace (see |<f-args>|)
• `bang`: `true` if the command was executed with a `!` modifier (see |<bang>|)
• `line1`: the starting line number of the command range (see |<line1>|)
• `line2`: the final line number of the command range (see |<line2>|)
• `range`: the number of items in the command range: 0, 1, or 2 (see |<range>|)
• `count`: any count supplied (see |<count>|)
• `smods`: a table containing the command modifiers (see |<mods>|)

For example:
>lua
    vim.api.nvim_create_user_command('Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1 })

    vim.cmd.Upper('foo')
    --> FOO
<
The `complete` attribute can take a Lua function in addition to the
attributes listed in |:command-complete|. >lua

    vim.api.nvim_create_user_command('Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1,
        complete = function(ArgLead, CmdLine, CursorPos)
          -- return completion candidates as a list-like table
          return { "foo", "bar", "baz" }
        end,
    })
<
Buffer-local user commands are created with `vim.api.`|nvim_buf_create_user_command()|.
Here the first argument is the buffer number (`0` being the current buffer);
the remaining arguments are the same as for |nvim_create_user_command()|:
>lua
    vim.api.nvim_buf_create_user_command(0, 'Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1 })
<
------------------------------------------------------------------------------
Deleting user commands                           *lua-guide-usercommands-delete*

User commands can be deleted with `vim.api.`|nvim_del_user_command()|. The only
argument is the name of the command:
>lua
    vim.api.nvim_del_user_command('Upper')
<
To delete buffer-local user commands use `vim.api.`|nvim_buf_del_user_command()|.
Here the first argument is the buffer number (`0` being the current buffer),
and second is command name:
>lua
    vim.api.nvim_buf_del_user_command(4, 'Upper')
<
==============================================================================
Credits                                                      *lua-guide-credits*
This guide is in large part taken from nanotee's Lua guide:
https://github.com/nanotee/nvim-lua-guide

Thank you @nanotee!

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
