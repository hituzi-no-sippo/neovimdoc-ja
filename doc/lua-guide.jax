*lua-guide.txt*                        Nvim

                            NVIM REFERENCE MANUAL

                          Guide to using Lua in Nvim


                                       Type |gO| to see the table of contents.

==============================================================================
イントロダクション                                                   *lua-guide*

このガイドは Nvim でLua を使用するための基本を説明します。辞書のように全ての
機能を細かく載せるものではありません。NvimでLua を快適に使い始めるための最低限
の知識、サバイバルキットのような物だと思ってください。

このガイドは Lua 言語自体のガイドではないことに注意してください。 Nvim で使いや
すいように提供されている機能についてのガイドです。Lua について更に学びたい場合
は、 |luaref| や、 |lua-concepts| をご覧ください。同様に、 |user-manual| に載っている
Nvim の基本的な機能(コマンド、オプション、マッピング、自動コマンド)にある程度慣
れていることを前提としています。

------------------------------------------------------------------------------
APIについて                                                      *lua-guide-api*

このガイドの目的は、Lua ("API") で Nvim を操作するいくつかの方法を紹介すること
です。この API は3つの異るレイヤーから成っています:

1. Vim から継承された "Vim API": Vim script の |ex-commands| 、
|builtin-functions|、 |uset-function|。これらの3つはそれぞれ、 |vim.cmd()|、
|vim.fn| でアクセスできます。下記の |lua-guide-vimscript| で紹介します。

2. リモートプラグインと GUI で使われる C で書かれた "Nvim API"。 |api| を参照し
てください。これらの関数は |vim.api| でアクセスできます。

3. Lua 専用に書かれた "Lua API"。これらは `vim.*` でアクセスできます。
|lua-stdlib| を参照してください。

ここで重要な違いは、API 関数は元のレイヤーから動作を継承することです。例えば、
Nvim API 関数は Lua で引数を省略(`nil` として渡される)できたとしても全てを指定
する必要があります。加えて、Vim API 関数はインデックスが0始まりなのに対して、
Lua では1始まりです。

これによって、新しい API を作ることなく Lua に対応することができました。そのため、
機能やパフォーマンスに大きな利点がない限り関数はレイヤー間で重複しません。(例え
ば、|:autocmd| を使用せず、Lua 関数で |nvim_create_autocmd()| を使用できます。)
同じ方法が複数ある場合、このガイドでは Lua から最も使いやすい方法を紹介します。

==============================================================================
Luaを使う                                                  *lua-guide-using-Lua*

コマンドラインから Lua コードを実行するには、|:lua| コマンドを使用します。:
>vim
    :lua print("Hello!")
<
Note: 各 |:lua| コマンドはそれぞれスコープを持っており、ローカル宣言された変数はそ
の他のコマンドからアクセスできません。次の例は動作しません。:
>vim
    :lua local foo = 1
    :lua print(foo)
    " prints "nil" instead of "1"
<
また、 |:lua=| で `:lua vim.print( ...)` と同様のことができます。
これによって、変数やテーブルの値を楽に確認できます。:
>lua
    :lua =package
<
外部の Lua ファイルを実行したい場合、|:source| コマンドを使用します。
これは、Vim script ファイルと同じ様に動作します。:
>vim
    :source ~/programs/baz/myluafile.lua
<
最後に、ヒアドキュメント構文(|:lua-heredoc|)を使用すると、Vim script ファイルに
Lua コードを含めることができます。:
>vim
    lua << EOF
      local tbl = {1, 2, 3}
      for k, v in ipairs(tbl) do
        print(v)
      end
    EOF
<
------------------------------------------------------------------------------
起動時に Lua ファイルを使用する                               *lua-guide-config*

Nvim は、`init.vim` か `init.lua` を設定ファイルとして使用することができます。
ただし、同時に使用することはできません。これらは、|config| ディレクトリへ配置す
る必要があり一般的に Linux, BSD, macOS では `~/.config/nvim` で Windows では
`~/AppData/Local/nvim/` です。Note `init.vim` 内で Lua を、`init.vim` 内でVim
sript を使うこともできます。後ほど説明します。

その他の Lua スクリプトを |startup| 時に自動で実行させたい場合、`runtimepath` 内
にある `plugin/` ディレクトリに配置してください。

------------------------------------------------------------------------------
Luaモジュール                                                *lua-guide-modules*

任意のタイミングで Lua ファイルを読み込みたい場合、 |'runtimepath'| 内にある
`lua` ディレクトリに配置して `require` でロードします。(これは、Vim script にお
ける |autoload| と同じ役割です。)

このようなディレクトリ構造があるとします。:
>
    ~/.config/nvim
    |-- after/
    |-- ftplugin/
    |-- lua/
    |  |-- myluamodule.lua
    |  |-- other_modules/
    |     |-- anothermodule.lua
    |     |-- init.lua
    |-- plugin/
    |-- syntax/
    |-- init.vim
<

次の Lua コードで `myluamodule.lua` をロードします。:
>lua
    require("myluamodule")
<
Note: `.lua` 拡張子がつかないことに注意してください。

同様に、`other_modules/anothermodule.lua` をロードするには次のようにします。
>lua
    require('other_modules/anothermodule')
    -- or
    require('other_modules.anothermodule')
<

Note: サブモジュールは単なるサブディレクトリであることに注意してください。`.` は
パスの区切り文字 `/` と同じです。(Windows でも同様)

フォルダ内にある |init.lua| ファイルはファイル名を指定しなくてもロードできます。:
>lua
    require('other_modules') -- loads other_modules/init.lua
<
読み込もうとしたモジュールが存在しない場合と構文エラーが含まれている場合、実行中
のスクリプトは停止します。このようなエラーをキャッチするには `pcall()` を使用します。
次の例では、`module_with_error` のロードを試みてから関数を呼びます。失敗した場合、
エラーメッセージを表示します。:
>lua
    local ok, mymod = pcall(require, 'module_with_error')
    if not ok then
      print("Module had an error")
    else
      mymod.function()
    end
<
|:source| とは対照的に、|require()| は |runtimepath| 内の `lua/` ディレクトリを
検索するだけでなく、初回使用時にモジュールをキャッシュします。再度 `require()`
を呼び出す場合、スクリプトは評価されずキャッシュされたファイルを返します。もう一
度実行したい場合、手動でキャッシュを削除します。:
>lua
    package.loaded['myluamodule'] = nil
    require('myluamodule')    -- read and execute the module again from disk
<
------------------------------------------------------------------------------
参照:
• |lua-require|
• |luaref-pcall()|

==============================================================================
Vim のコマンドと関数を Lua から使う                        *lua-guide-vimscript*

全ての Vim のコマンドと関数は Lua から使用することができます。

------------------------------------------------------------------------------
Vim コマンド                                            *lua-guide-vim-commands*

Vim コマンドを Lua から実行するには、文字列を |vim.cmd()| に渡します。:
>lua
    vim.cmd("colorscheme habamax")
<
Note 特殊な文字はバックシュラッシュでエスケープが必要です:
>lua
    vim.cmd("%s/\\Vfoo/bar/g")
<
別の方法として角カッコを使った文字列リテラル(|lua-literal| を参照)があります。
>lua
    vim.cmd([[%s/\Vfoo/bar/g]])
<
また、文字列リテラルは複数行の文字列を扱える利点があります。
1回の |vim.cmd()| の呼び出しで複数のコマンドを渡すこともできます。:
>lua
    vim.cmd([[
      highlight Error guibg=red
      highlight link Warning Error
    ]])
<
これは |lua-heredoc| と反対の機能です。 `init.lua` にVim scriptのコードを含めること
ができます。

プログラムから Vim コマンドを呼び出したい場合、次のような方法があります(上記の例
と等価です):
>lua
    vim.cmd.colorscheme("habamax")
    vim.cmd.highlight({ "Error", "guibg=red" })
    vim.cmd.highlight({ "link", "Warning", "Error" })
<
------------------------------------------------------------------------------
Vim script 関数                                        *lua-guide-vim-functions*

|vim.fn| を使用して Vim script の関数を Lua から呼び出します。データの型は Lua
と Vim script の間で自動的に変換されます。:
>lua
    print(vim.fn.printf('Hello from %s', 'Lua'))

    local reversed_list = vim.fn.reverse({ 'a', 'b', 'c' })
    vim.print(reversed_list) -- { "c", "b", "a" }

    local function print_stdout(chan_id, data, name)
      print(data[1])
    end

    vim.fn.jobstart('ls', { on_stdout = print_stdout })
<
これは |builtin-function| と |user-function| の両方で動作します。

Note ハッシュ(`#`)は Lua で有効な識別子ではないため、 |autoload| 関数などを呼び
出すには次の構文を使用します。:
>lua
    vim.fn['my#autoload#function']()
<
------------------------------------------------------------------------------
参照:
• |builtin-functions|: Vim script 関数のアルファベット順のリスト
• |function-list|:     トピックごとにグループ化された Vim script 関数のリスト
• |:runtime|:          |'runtimepath'| のパターンに一致する全ての Lua スクリプトが
                      実行されます
• |package.path|:      `require()` で検索される全てのパスのリスト

==============================================================================
変数                                                       *lua-guide-variables*

|variable-scope| に準じて変数を読み書きできるラッパーがあります。:

• |vim.g|:   グローバル変数(|g:|)
• |vim.b|:   バッファローカルな変数 (|b:|)
• |vim.w|:   ウィンドウローカルな変数 (|w:|)
• |vim.t|:   タブページにローカルな変数 (|t:|)
• |vim.v|:   Vim が定義している変数 (|v:|)
• |vim.env|: エディタのセッションで定義されている環境変数

データの型は次の例のように自動的に変換されます。:
>lua
    vim.g.some_global_variable = {
      key1 = "value",
      key2 = 300
    }

    vim.print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 300 }
<
バッファ(番号)やウィンドウ(|window_ID|)やタブページを指定したい場合、次のように
ラッパーのインデックスを指定します。:
>lua
    vim.b[2].myvar = 1               -- set myvar for buffer number 2
    vim.w[1005].myothervar = true    -- set myothervar for window ID 1005
<
変数名に Lua で有効ではない文字が含まれている場合、次の構文を使用します。：
>lua
    vim.g['my#variable'] = 1
<
Note 配列のフィールドを直接変更することはできません。次の例は動作しません。:
>lua
    vim.g.some_global_variable.key2 = 400
    vim.print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 300 }
<
代わりに、Lua の中間テーブルを作成してから上書きします。:
>lua
    local temp_table = vim.g.some_global_variable
    temp_table.key2 = 400
    vim.g.some_global_variable = temp_table
    vim.print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 400 }
<
変数を削除するには、単に `nil` を代入します。:
>lua
    vim.g.myvar = nil
<
------------------------------------------------------------------------------
参考:
• |lua-vim-variables|

==============================================================================
オプション                                                   *lua-guide-options*

Lua で オプション(|options|)を設定する方法は2種類あります。

------------------------------------------------------------------------------
vim.opt

`init.lua` で グローバルオプションとローカルオプションを設定する最も便利な方法と
して `vim.opt` とその仲間達があります。

• |vim.opt|:        |:set| のように動作します。
• |vim.opt_global|: |:setglobal| のように動作します。
• |vim.opt_local|:  |:setlocal| のように動作します。

例えば、次の Vim script コマンドは
>vim
    set smarttab
    set nosmarttab
<
下記と等価です。
>lua
    vim.opt.smarttab = true
    vim.opt.smarttab = false
<
list/map/set のようなオプションは
>vim
    set wildignore=*.o,*.a,__pycache__
    set listchars=space:_,tab:>~
    set formatoptions=njt
<
次のように Lua のテーブルで楽に設定できます。
>lua
    vim.opt.wildignore = { '*.o', '*.a', '__pycache__' }
    vim.opt.listchars = { space = '_', tab = '>~' }
    vim.opt.formatoptions = { n = true, j = true, t = true }
<
これらのラッパーには Vim script における |:set+=|, |:set^=|, |:set-=| と同じ動作
をするメソッドがあります。:
>lua
    vim.opt.shortmess:append({ I = true })
    vim.opt.wildignore:prepend('*.o')
    vim.opt.whichwrap:remove({ 'b', 's' })
<
ただし、オプションの値に直接アクセスすることができず、|vim.opt:get()| を経由して
アクセスします。
>lua
    print(vim.opt.smarttab)
    --> {...} (big table)
    print(vim.opt.smarttab:get())
    --> false
    vim.print(vim.opt.listchars:get())
    --> { space = '_', tab = '>~' }
<
------------------------------------------------------------------------------
vim.o

上記に対して、変数のように直接扱うことのできる `vim.o` とその仲間達があります。
`:echo &number` や `:let &listchars='space:_,tab:>~'` のようにオプションを取得、
設定できます。

• |vim.o|:  |:set| のように動作します。
• |vim.go|: |:setglobal| のように動作します。
• |vim.bo|: バッファローカルなオプション
• |vim.wo|: ウィンドウローカルなオプション(2次元配列としてアクセス可能)

例:
>lua
    vim.o.smarttab = false -- :set nosmarttab
    print(vim.o.smarttab)
    --> false
    vim.o.listchars = 'space:_,tab:>~' -- :set listchars='space:_,tab:>~'
    print(vim.o.listchars)
    --> 'space:_,tab:>~'
    vim.o.isfname = vim.o.isfname .. ',@-@' -- :set isfname+=@-@
    print(vim.o.isfname)
    --> '@,48-57,/,.,-,_,+,,,#,$,%,~,=,@-@'
    vim.bo.shiftwidth = 4 -- :setlocal shiftwidth=4
    print(vim.bo.shiftwidth)
    --> 4
<
変数と同じようにバッファ番号や |window_ID| を指定することができます。何も指定し
ない場合、カレントバッファ/カレントウィンドウが対象になります。:
>lua
    vim.bo[4].expandtab = true -- sets expandtab to true in buffer 4
    vim.wo.number = true       -- sets number to true in current window
    vim.wo[0].number = true    -- same as above
    vim.wo[0][0].number = true -- sets number to true in current buffer
                               -- in current window only
    print(vim.wo[0].number)    --> true
<
------------------------------------------------------------------------------
参照:
• |lua-options|

==============================================================================
マッピング                                                  *lua-guide-mappings*

Vim コマンドや Lua 関数をキー入力にマッピングすることができます。

------------------------------------------------------------------------------
マッピングを作成する                                    *lua-guide-mappings-set*

マッピングを作成するには |vim.keymap.set()| を使用します。この関数は3つの引数を
必要とします。:
• {mode} はマッピングを適用するモードのプレフィックスの文字列または、テーブルで
   す。プレフィックスのリストは |:map-modes| にあります。"!"を指定すると |:map!| 
   となり、何も指定しない場合は |:map| です。
• {lhs} はトリガーとなるキーの文字列です。
• {rhs} は Vim コマンドの文字列か、Lua の関数です。{lhs} を入力すると実行されま
   す。空の文字列は |<Nop>| と解釈され、キーを無効にします。


例:
>lua
    -- Normal mode mapping for Vim command
    vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>')
    -- Normal and Command-line mode mapping for Vim command
    vim.keymap.set({'n', 'c'}, '<Leader>ex2', '<cmd>echo "Example 2"<cr>')
    -- Normal mode mapping for Lua function
    vim.keymap.set('n', '<Leader>ex3', vim.treesitter.start)
    -- Normal mode mapping for Lua function with arguments
    vim.keymap.set('n', '<Leader>ex4', function() print('Example 4') end)
<
Lua のモジュールから関数をマッピングすることもできます。
>lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action)
<
Note この場合、マッピングが定義された時にプラグインが読み込まれます。マッピング
が実行された時に読み込んで欲しい場合(|autoload| 関数のように)、`function() end`
でラップします。:
>lua
    vim.keymap.set('n', '<Leader>pl2', function() require('plugin').action() end)
<
4つ目の引数はオプションでテーブルを渡します。 |:map-arguments| にあるマッピングの
振舞いを指定します。下記のオプションはとても役に立ちます。:
• `buffer`: バッファ番号を指定するとそのバッファだけにマッピングを適用できます。
   `0` か `true` を指定するとカレントバッファになります。 >lua
    -- set mapping for the current buffer
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { buffer = true })
    -- set mapping for the buffer number 4
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { buffer = 4 })
<
• `silent`: `true` を指定するとエラーメッセージを抑制できます。 >lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { silent = true })
<
• `expr`: `true` を指定すると {rhs} は実行されず返り値を入力として扱います。特
   殊な |keycodes| は自動的に変換されます。例えば、次の例は popupmenu の中だけ
   <down> を <c-n> に置き換えます。: >lua
    vim.keymap.set('c', '<down>', function()
      if vim.fn.pumvisible() == 1 then return '<c-n>' end
      return '<down>'
    end, { expr = true })
<
• `desc`: |:map| などでマッピングを表示したときに一緒に表示される文字列です。
   Lua 関数を {rhs} にした場合、`Lua: <number> <source file>:<line>` としか表示
   されないため、説明を書くとわかりやすくなります。そのため、プラグイン等でマッ
   ピングを作成する場合は記入することを強く推奨します。 >lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action,
      { desc = 'Execute action from plugin' })
<
• `remap`: デフォルトでは全てのマッピングは再帰的に実行されません(すなわち、
   |vim.keymap.set()|は |:noremap| と同じ動作です)。{rhs} 自体にマッピングを適用
   したい場合、 `remap = true` を指定します。: >lua
    vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>')
    -- add a shorter mapping
    vim.keymap.set('n', 'e', '<Leader>ex1', { remap = true })
<
  Note: |<Plug>| マッピングはデフォルトである `remap = false` でも常に展開されま
  す。: >lua
    vim.keymap.set('n', '[%', '<Plug>(MatchitNormalMultiBackward)')
<
------------------------------------------------------------------------------
マッピングを削除する                                    *lua-guide-mappings-del*

特定のマッピングを削除するには |vim.keymap.del()| を使用します。:
>lua
    vim.keymap.del('n', '<Leader>ex1')
    vim.keymap.del({'n', 'c'}, '<Leader>ex2', {buffer = true})
<
------------------------------------------------------------------------------
参照:
• `vim.api.`|nvim_get_keymap()|:     全てのグローバルマッピングを返します
• `vim.api.`|nvim_buf_get_keymap()|: バッファローカルなマッピングを全て返します

==============================================================================
自動コマンド                                            *lua-guide-autocommands*

|autocommand| は|events| をトリガーにして Vim コマンドや Lua 関数を自動的に実行
します。例えば、ファイルを読み込んだり書き込んだ時、ウィンドウを作成した時などで
す。これらは Nvim API を介して Lua から使用することができます。

------------------------------------------------------------------------------
自動コマンドを作成する                            *lua-guide-autocommand-create*

自動コマンドは `vim.api.`|nvim_create_autocmd()| を使って作成します。この関数は
引数を2つ取ります。:
• {event}: コマンドや関数のトリガーになるイベント名の文字列または、そのテーブル。
• {opts}:  イベントがトリガーされた時の動作を制御するキーを持ったテーブル。

最も重要なオプション:

• `pattern` : |autocmd-pattern| を含む文字列または、そのテーブル。Note: `$HOME`
               の様な環境変数や `~` は自動的に展開されません。`vim.fn.`|expand()|
               を使用する必要があります。
• `command`:  Vim コマンドを含んだ文字列。
• `callback`: Lua 関数。

`command` か `callback` のどちらかは、必ず渡す必要があります。 `pattern` を省略した
場合、`pattern = '*'` になります。
例:
>lua
    vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
      pattern = {"*.c", "*.h"},
      command = "echo 'Entering a C or C++ file'",
    })

    -- Same autocommand written with a Lua function instead
    vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
      pattern = {"*.c", "*.h"},
      callback = function() print("Entering a C or C++ file") end,
    })

    -- User event triggered by MyPlugin
    vim.api.nvim_create_autocmd("User", {
      pattern = "MyPlugin",
      callback = function() print("My Plugin Works!") end,
    })
<

自動コマンド実行時、Lua関数にはその時の情報が入ったテーブルが渡されます。
特に便利なキーはこちら
• `match`: `pattern`にマッチした文字列(|<amatch>|を参照)
• `buf`:   イベントがトリガーされたバッファ番号(|<abuf>|を参照)
• `file`:  イベントがトリガーされたファイル名(|<afile>|を参照)
• `data`:  渡された関連情報のテーブル

次の例では、いくつかのファイルタイプでバッファローカルなマッピングをすることがで
きます。
>lua
    vim.api.nvim_create_autocmd("FileType", {
      pattern = "lua",
      callback = function(args)
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, { buffer = args.buf })
      end
    })
<
たとえ渡される引数を使う予定がなくても、エラーを避けるために `function() end` で
ラップする必要があります。
>lua
    vim.api.nvim_create_autocmd('TextYankPost', {
      callback = function() vim.hi.on_yank() end
    })
<
(Luaの関数定義時、未使用の引数は省略できるため `function(args) ... end` と等価で
す。)

パターンの代わりに `buffer` を指定することでバッファローカルな自動コマンド
(|aut-buflocal|を参照)を作成できます。
この場合、 `pattern` は使用できません。:
>lua
    -- set autocommand for current buffer
    vim.api.nvim_create_autocmd("CursorHold", {
      buffer = 0,
      callback = function() print("hold") end,
    })

    -- set autocommand for buffer number 33
    vim.api.nvim_create_autocmd("CursorHold", {
      buffer = 33,
      callback = function() print("hold") end,
    })
<
マッピングと同様に、 `desc` に説明を書くことができます。(そして、するべきです。):
>lua
    vim.api.nvim_create_autocmd('TextYankPost', {
      callback = function() vim.hi.on_yank() end,
      desc = "Briefly highlight yanked text"
    })
<
最後に、 `group` キーで自動コマンドをグループ化できます。詳細は次のセクションで説
明します。

------------------------------------------------------------------------------
自動コマンドのグループ化                          *lua-guide-autocommands-group*

自動コマンドをグループ化すると、関連したものをまとめて扱えるようになります。
詳細は |autocmd-groups| を参照してください。これは自動コマンドを整理したり、多重登
録を防止したりするのに役立ちます。

グループは `vim.api.`|nvim_create_augroup()| で作成できます。この関数は2つの引数を取
ります。: グループ名と、自動コマンドが既に存在するとき(グループの自動コマンドを
すべて)削除するかを指定するテーブルです。 この関数はグループID(数値)を返します。
グループはこのグループIDか(作成済みの)名前で指定することができます。

次の例は、再読み込みされる可能性のあるファイルで自動コマンドを設定する一般的な
Vim scriptです。
>vim
    augroup vimrc
      " Remove all vimrc autocommands
      autocmd!
      au BufNewFile,BufRead *.html set shiftwidth=4
      au BufNewFile,BufRead *.html set expandtab
    augroup END
<
下記のLuaコードは等価です。:
>lua
    local mygroup = vim.api.nvim_create_augroup('vimrc', { clear = true })
    vim.api.nvim_create_autocmd({'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = mygroup,
      command = 'set shiftwidth=4',
    })
    vim.api.nvim_create_autocmd({'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = 'vimrc',  -- equivalent to group=mygroup
      command = 'set expandtab',
    })
<
グループは名前に対して一意です。そのため、別のファイルでも使用できます。:
>lua
    local mygroup = vim.api.nvim_create_augroup('vimrc', { clear = false })
    vim.api.nvim_create_autocmd({'BufNewFile', 'BufRead' }, {
      pattern = '*.c',
      group = mygroup,
      command = 'set noexpandtab',
    })
<
------------------------------------------------------------------------------
自動コマンドの削除                               *lua-guide-autocommands-delete*

`vim.api.`|nvim_clear_autocmds()|を使用して自動コマンドを削除できます。
この関数は、削除する自動コマンドを指定するテーブルを取ります。
>lua
    -- Delete all BufEnter and InsertLeave autocommands
    vim.api.nvim_clear_autocmds({event = {"BufEnter", "InsertLeave"}})

    -- Delete all autocommands that uses "*.py" pattern
    vim.api.nvim_clear_autocmds({pattern = "*.py"})

    -- Delete all autocommands in group "scala"
    vim.api.nvim_clear_autocmds({group = "scala"})

    -- Delete all ColorScheme autocommands in current buffer
    vim.api.nvim_clear_autocmds({event = "ColorScheme", buffer = 0 })
<
Note: `group` キーが指定された場合、対象はそのグループのみになります。

------------------------------------------------------------------------------
参照
• |nvim_get_autocmds()|:  マッチした全ての自動コマンドを返す
• |nvim_exec_autocmds()|: マッチした全ての自動コマンドを実行する

==============================================================================
ユーザーコマンド                                            *lua-guide-commands*

|user-commands| はVim script または Lua 関数を呼び出すカスタムVimコマンドです。
組み込みコマンドの様に引数を取ったり、範囲を指定したり、引数の補完ができたりしま
す。これらはプラグインでとても役に立ちます。ここでは基本的なことを説明します。

------------------------------------------------------------------------------
ユーザーコマンドを作成する                           *lua-guide-commands-create*

ユーザーコマンドは `vim.api.`|nvim_create_user_command()| で作成します。
この関数は3つの引数を取ります。:
• コマンド名(組み込みコマンドと区別するため大文字で始める必要があります。)
• Vimコマンドの文字列または、Lua関数(コマンド実行時に呼び出されます)
• |command-attributes| のテーブル。次のようなキーを持ちます。 `desc` (コマンドの説
   明)、 `force` (同じ名前のコマンドを上書きしないようにするには `false` を指定しま
   す)、 `preview` (|command-preview| に使用するLua関数)。

例:
>lua
    vim.api.nvim_create_user_command('Test', 'echo "It works!"', {})
    vim.cmd.Test()
    --> It works!
<
(Note: 3つ目の引数は何も指定しない場合でも必須です。)

Lua関数は呼び出し時、修飾子を含んだテーブルが渡されます。
重要なものはこちらです。:
• `name`: コマンド名の文字列。
• `fargs`: 空白で分割されたコマンドの引数が含まれたテーブル。(|<f-args>|を参照)
• `bang`: コマンドが`!`付きで実行されたなら`true`。(|<bang>|を参照)
• `line1`: コマンド範囲の最初の行番号。(|<line1>|を参照)
• `line2`: コマンド範囲の最後の行番号。(|<line2>|を参照)
• `range`: コマンド範囲の要素の数:0,1 または 2。(|<range>|を参照)
• `count`: 与えられたカウント。(|<count>|を参照)
• `smods`: コマンド修飾子のテーブル。(|<mods>|を参照)

例:
>lua
    vim.api.nvim_create_user_command('Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1 })

    vim.cmd.Upper('foo')
    --> FOO
<
`complete` は |command-complete| の属性や Lua 関数を取ります。 >lua

    vim.api.nvim_create_user_command('Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1,
        complete = function(ArgLead, CmdLine, CursorPos)
          -- return completion candidates as a list-like table
          return { "foo", "bar", "baz" }
        end,
    })
<
バッファローカルなユーザーコマンドを作成するには、 `vim.api.`|nvim_buf_create_user_command()|
を使用します。 最初の引数はバッファ番号です。(`0`はカレントバッファです。)
残りの引数は |nvim_create_user_command()| と同様です。:
>lua
    vim.api.nvim_buf_create_user_command(0, 'Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1 })
<
------------------------------------------------------------------------------
ユーザーコマンドを削除する                           *lua-guide-commands-delete*

ユーザーコマンドを削除するには `vim.api.`|nvim_del_user_command()| を使用します。
引数はコマンド名1つだけです。:
>lua
    vim.api.nvim_del_user_command('Upper')
<
バッファローカルなユーザーコマンドを削除するには `vim.api.`|nvim_buf_del_user_command()|
を使用します。最初の引数はバッファ番号です。(`0`はカレントバッファです。)
2つ目の引数はコマンド名です。:
>lua
    vim.api.nvim_buf_del_user_command(4, 'Upper')
<
==============================================================================
クレジット                                                   *lua-guide-credits*
This guide is in large part taken from nanotee's Lua guide:
https://github.com/nanotee/nvim-lua-guide

Thank you @nanotee!

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
